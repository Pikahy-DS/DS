import telebot
import config
import random
from telebot import types, TeleBot
import datetime
import COVID19Py
import pyowm
from telebot.types import InlineKeyboardMarkup
from pycbrf.toolbox import ExchangeRates
import One
import gc
import time
bot: TeleBot = telebot.TeleBot(config.TOKEN)
owm = pyowm.OWM(config.TOKEN2, language = "ru")
covid19 = COVID19Py.COVID19()
smiles = [
    '‚ù§','üòò','üòÇ','‚ò∫','üò≥','üòö','üòÖ','üôä','üòê','üòã','üòÜ','üòÉ','ü§£','üòç','ü•∞','üòò','üòù','üßê','ü§¨','üò°','ü§Ø'
]
hello = [
    'Good morning', 'Good evening, i"m the dispatcher ', 'Good night', 'You are welcome', 'Thanks', '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ', 'Hello', 'Hi', '–ü—Ä–∏–≤–µ—Ç','–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, —è –¥–∏—Å–ø–µ—Ç—á–µ—Ä'
]
@bot.message_handler(commands = ['start'])
def welcome(message):

    #keybroad
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard = True)
    #item4 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üëë COVID19")
    item6 = types.KeyboardButton('–í–∞–∫–∞–Ω—Å–∏–∏')
    item5 = types.KeyboardButton('üìÖ –í—Ä–µ–º—è')
    item1 = types.KeyboardButton('üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä')
    item3= types.KeyboardButton('‚õÖÔ∏è–ü–æ–≥–æ–¥–∞')
    item4 = types.KeyboardButton('üí∂ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
    markup.add(item4, item2, item3)
    markup.add(item5,item6)
    markup.add(item1)
    bot.send_message(message.chat.id,
                     f"{random.choice(hello)}" + ", {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –∞ —Ç—ã –Ω–µ—Ç, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–±–µ –∂–∏–∑–Ω—å ".format(
                         message.from_user, bot.get_me()) + f"{random.choice(smiles)}",
                     parse_mode='html', reply_markup = markup)
    print(message.from_user)
@bot.message_handler(commands = ['help'])
def helps(message):
    ic = datetime.datetime.now(tz=None)
    date_time= ic.strftime("%d-%m-%Y")
    bot.send_message(message.chat.id, '–õ—è, —Ç—ã —á–µ <b>–ø–æ–∫–µ–º–æ–Ω</b>, –∑–∞–ø—É—Ç–∞–ª—Å—è?\n–ù—É, –Ω–µ –±–æ–π—Å—è, —â–∞ —è —Ç–µ–±–µ –ø–æ–º–æ–≥—É –æ—Å–º—ã—Å–ª–∏—Ç—å, —á—Ç–æ –∫ —á–µ–º—É', parse_mode = 'html')
    bot.send_message(message.chat.id, f'–í–æ—Ç –º–æ–π <b>–ø–æ–ª–Ω—ã–π</b> —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ {date_time} :\n/help - –ù—É —Ç–æ —á—Ç–æ —Ç—ã –∏ –≤—ã–∑–≤–∞–ª, <b>–∫—Ä–∞—Å–∞–≤—á–∏–∫</b> {smiles[3]}\n/start - –û–ø–∞, –≤–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏? {random.choice(smiles)}\n–ò –≤—Å–µ, –±—Ä–∞—Ç–∏—à–∫–∞, –ø—Ä–∏–ø–ª—ã–ª–∏, –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç {random.choice(smiles)}', parse_mode = 'html')

@bot.callback_query_handler(func = lambda call: True) #–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
def callback_woker(call):
    try:
        if call.data == 'yes':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True )
            item1 = types.KeyboardButton("–î–∞ ")
            item2 = types.KeyboardButton("–ù–µ—Ç")
            item3 = types.KeyboardButton('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup.add(item1, item2)
            markup.add(item3)
            bot.send_message(call.message.chat.id, '–ê —è –¥–æ–≤–µ—Ä—è—é —Ç–µ–±–µ üòè ')

            bot.send_message(call.message.chat.id, '–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª—Å—è –∫ –∏–≥—Ä–µ? üòà ', reply_markup = markup )
        elif call.data == 'no':
            bot.send_message(call.message.chat.id, f'–ò –Ø –¢–ï–ë–ï –ù–ï –î–û–í–ï–†–Ø–Æ {random.choice(smiles)}')
        elif call.data == 'one':
            keyboard = types.InlineKeyboardMarkup()
            Yes1 = types.InlineKeyboardButton(text='–î–∞', callback_data='Yes1')
            keyboard.add(Yes1)
            No1 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='No1')
            keyboard.add(No1)
            bot.send_message(call.message.chat.id, '–ò —Ç–∞–∫, —É —Ç–µ–±—è —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞' + f'\n–ó–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ {random.choice(smiles)}')
            bot.send_message(call.message.chat.id, '–ó–∞–≥–∞–¥–∞–ª?', reply_markup = keyboard)
        elif call.data == 'two':
            keyboard = types.InlineKeyboardMarkup()
            Yes1 = types.InlineKeyboardButton(text='–î–∞', callback_data='Yes1')
            keyboard.add(Yes1)
            No1 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='No1')
            keyboard.add(No1)
            bot.send_message(call.message.chat.id, '–ò —Ç–∞–∫, —É —Ç–µ–±—è —Ä–æ–≤–Ω–æ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏' + f'\n–ó–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ {random.choice(smiles)}')
            bot.send_message(call.message.chat.id, '–ó–∞–≥–∞–¥–∞–ª?', reply_markup=keyboard)
        elif call.data == 'LOL' or call.data == 'LOL1':
            bot.send_message(call.message.chat.id, f'–ù—É –≤—Å–µ <b>—à—É—Ç–Ω–∏–∫</b>, –Ω–∞ \n—ç—Ç–æ–º\n —à—É—Ç–∫–∏ –∏ <b>–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å</b> {random.choice(smiles)}', parce_mode = 'html')
        elif call.data == 'Yes1':
            keyboard = types.InlineKeyboardMarkup()
            Yes2 = types.InlineKeyboardButton(text = '–î–∞', callback_data = 'Yes2')
            No2 = types.InlineKeyboardButton(text = '–ù–µ—Ç', callback_data = 'No2')
            keyboard.add(Yes2, No2)
            bot.send_message(call.message.chat.id, f'–ò —Ç–∞–∫, —Ç—ã –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {random.randint(1,100)}, —è –ø—Ä–∞–≤? {random.choice(smiles)} ',reply_markup = keyboard )
        elif call.data == 'Yes2':
            keyboard = types.InlineKeyboardMarkup()
            Yes3 = types.InlineKeyboardButton(text = '–î–∞', callback_data = 'Yes3')
            No3 = types.InlineKeyboardButton(text = '–ù–µ—Ç', callback_data = 'No3')
            keyboard.add(Yes3, No3)
            bot.send_message(call.message.chat.id, f'–£—Ñ—Ñ, –∫–∞–∫–æ–π —è –º–æ—â–Ω—ã–π, –î–ê? {random.choice(smiles)}', reply_markup = keyboard)
        elif call.data == 'Yes3' or call.data == 'No3':
            bot.send_message(call.message.chat.id, f'–í—Å–µ —Ä–∞–≤–Ω–æ —è –º–æ—â–Ω—ã–π {random.choice(smiles)}')
        elif call.data == 'VAK':
            bot.send_message(call.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é...')
            job = []
            i = 0
            # One.main()
            # with open('../Python/text.data', 'r', encoding='utf - 8') as f:
            #     for word in f.readlines():
            #         job = [work for work in range(1,4)]
            #         bot.send_message(call.message.chat.id, f'{job[0]}\n{job[1]}\n{job[2]}\n{job[3]}')
            #         if i > 3:
            #             i = 0
            #             job.clear()
            #         else:
            #             i = i + 1
            #             job.append(word)
        elif call.data == 'VAK1':
            job = []
            i = 0
            bot.send_message(call.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é...')
            #One.main()
            with open('../Python/text.data', 'r', encoding='utf - 8') as f:
                for word in f.readlines():
                    if i >= 4:
                        i = 0
                        bot.send_message(call.message.chat.id, f'{job[0]}\n{job[1]}\n{job[2]}\n{job[3]}')
                        job.clear()
                    else:
                        i = i + 1
                        job.append(word)
                    #print(word)
                    #bot.send_message(call.message.chat.id, f'{word}\n{word}\n{word}')
        elif call.data == 'No2' or call.data == 'No1':
            keyboard = types.InlineKeyboardMarkup()
            Yes3 = types.InlineKeyboardButton(text='–î–∞', callback_data='Yes1')
            No3 = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
            keyboard.add(Yes3, No3)
            bot.send_message(call.message.chat.id, f'–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑', reply_markup= keyboard)
        elif call.data == 'Russia':
            location = covid19.getLocationByCountryCode("RU")
            date = location[0]['last_updated'].split('T')
            time = date[1].split(".")
            final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –†–æ—Å—Å–∏—è:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n" \
                            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
                            f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ä—Ç–µ–π: </b>" \
                            f"{location[0]['latest']['deaths']:,}"
            bot.send_message(call.message.chat.id, final_message, parse_mode='html')
        elif call.data == 'Usa':
            location = covid19.getLocationByCountryCode("US")
            date = location[0]['last_updated'].split('T')
            time = date[1].split(".")
            final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –°–®–ê:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n" \
                            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
                            f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ä—Ç–µ–π: </b>" \
                            f"{location[0]['latest']['deaths']:,}"
            bot.send_message(call.message.chat.id, final_message, parse_mode='html')
        elif call.data == 'EU':
            location = covid19.getLocationByCountryCode("IT")
            date = location[0]['last_updated'].split('T')
            time = date[1].split(".")
            final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –ò—Ç–∞–ª–∏—è:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n" \
                            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
                            f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ä—Ç–µ–π: </b>" \
                            f"{location[0]['latest']['deaths']:,}"
            bot.send_message(call.message.chat.id, final_message, parse_mode='html')
        elif call.data == 'Ukraine':
            location = covid19.getLocationByCountryCode("UA")
            date = location[0]['last_updated'].split('T')
            time = date[1].split(".")
            final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ –£–∫—Ä–∞–∏–Ω–∞:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n" \
                            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
                            f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ä—Ç–µ–π: </b>" \
                            f"{location[0]['latest']['deaths']:,}"
            bot.send_message(call.message.chat.id, final_message, parse_mode='html')
        elif call.data == 'All':
            try:
                location = covid19.getLatest()
                final_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É:</u>\n<b>–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location['confirmed']:,}\n<b>–°–º–µ—Ç—Ä–µ–π: </b>{location['deaths']:,}"
                bot.send_message(call.message.chat.id, final_message, parse_mode = 'html')
            except Exception:
                bot.edit_message_text(call.message.chat.id, '–≠—Ç–æ —á—Ç–æ –µ—â–µ –∑–∞ –ø–æ–∫–µ–º–æ–Ω?\n–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–µ–π—á–∞—Å –∫–∞–±–∞–Ω—á–∏–∫–∏ –ø–æ–¥—Å–∫–æ—á–∞—Ç –∏ –ø–æ—Ä–µ—à–∞—é—Ç!')
        elif call.data == 'Numerator':

            keyboard = types.InlineKeyboardMarkup()
            Monday = types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='Monday')
            keyboard.add(Monday)
            Tuesday = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data='Tuesday')
            keyboard.add(Tuesday)
            Wednesday = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data='Wednesday')
            keyboard.add(Wednesday)
            Thursday = types.InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data='Thursday')
            keyboard.add(Thursday)
            Friday = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data='Friday')
            keyboard.add(Friday)
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ", reply_markup = keyboard)
            #bot.edit_message_reply_markup(call.message.chat.id, message_id = call.message.message_id-1, reply_markup = '')
            # remove inline buttons

        # bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
        #                          text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11"
        elif call.data == 'EUR':
            try:
                ic = datetime.datetime.now(tz=None)
                date_time = datetime.datetime.now(tz=None)
                rates = ExchangeRates(ic)
                date_time= ic.strftime("%d-%m-%Y")
                EUR = str(rates['EUR'][4])
                bot.send_message(call.message.chat.id, f'–ù–∞ <u>{date_time}:</u> \n1 –µ–≤—Ä–æ = {EUR[:4]} —Ä—É–±.', parse_mode = 'html')
            except Exception:
                bot.edit_message_text(call.message.chat.id, '–≠—Ç–æ —á—Ç–æ –µ—â–µ –∑–∞ –ø–æ–∫–µ–º–æ–Ω?\n–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–µ–π—á–∞—Å –∫–∞–±–∞–Ω—á–∏–∫–∏ –ø–æ–¥—Å–∫–æ—á–∞—Ç –∏ –ø–æ—Ä–µ—à–∞—é—Ç!')
        elif call.data == 'USD':
            try:
                ic = datetime.datetime.now(tz=None)
                date_time = datetime.datetime.now(tz=None)
                rates = ExchangeRates(ic)
                date_time= ic.strftime("%d-%m-%Y")
                USD = str(rates['USD'][4])
                bot.send_message(call.message.chat.id, f'–ù–∞ <u>{date_time}:</u> \n1 –¥–æ–ª–ª–∞—Ä = {USD[:4]} —Ä—É–±.', parse_mode = 'html')
            except Exception:
                bot.edit_message_text(call.message.chat.id, '–≠—Ç–æ —á—Ç–æ –µ—â–µ –∑–∞ –ø–æ–∫–µ–º–æ–Ω?\n–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–µ–π—á–∞—Å –∫–∞–±–∞–Ω—á–∏–∫–∏ –ø–æ–¥—Å–∫–æ—á–∞—Ç –∏ –ø–æ—Ä–µ—à–∞—é—Ç!')
        elif call.data == 'Monday':
            bot.send_message(call.message.chat.id, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –¢–ê–£ (–ü—Ä–∞–∫—Ç–∏–∫–∞) \n2 –ø–∞—Ä–∞: –§–ò–ó - –†–ê \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) ')
        elif call.data == 'Tuesday':
            bot.send_message(call.message.chat.id, '–í—Ç–æ—Ä–Ω–∏–∫ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–õ–µ–∫—Ü–∏—è) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–∏–∫–∞ (–ö—É—Ä—Å–æ–≤–∞—è) ')
        elif call.data == 'Wednesday':
            bot.send_message(call.message.chat.id, '–°—Ä–µ–¥–∞ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –¢–ê–£ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –¢–ê–£ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n  ')
        elif call.data == 'Thursday':
            bot.send_message(call.message.chat.id, '–ß–µ—Ç–≤–µ—Ä–≥ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n  ')
        elif call.data == 'Friday':
            bot.send_message(call.message.chat.id, '–ü—è—Ç–Ω–∏—Ü–∞ - –ß–∏—Å–ª–∏—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n2 –ø–∞—Ä–∞: –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–ü—Ä–∞–∫—Ç–∏–∫–∞) ')
        elif call.data == 'Monday1':
            bot.send_message(call.message.chat.id,  '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n2 –ø–∞—Ä–∞: –§–ò–ó - –†–ê \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) ')
        elif call.data == 'Tuesday1':
            bot.send_message(call.message.chat.id, '–í—Ç–æ—Ä–Ω–∏–∫ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ü—Ä–∞–∫—Ç–∏–∫–∞) \n2 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ü—Ä–∞—Ç–∏–∫–∞) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–ö—É—Ä—Å–æ–≤–∞—è) ')
        elif call.data == 'Wednesday1':
            bot.send_message(call.message.chat.id, '–°—Ä–µ–¥–∞ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –î–∞—Ç—á–∏–∫–∏ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –î–∞—Ç—á–∏–∫–∏ (–ü—Ä–∞–∫—Ç–∏–∫–∞) \n3 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) ')
        elif call.data == 'Thursday1':
            bot.send_message(call.message.chat.id, '–ß–µ—Ç–≤–µ—Ä–≥ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n2 –ø–∞—Ä–∞: –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞ (–õ–µ–∫—Ü–∏—è) \n 3 –ø–∞—Ä–∞: –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞ (–ü—Ä–∞–∫—Ç–∏–∫–∞)')
        elif call.data == 'Friday1':
            bot.send_message(call.message.chat.id, '–ü—è—Ç–Ω–∏—Ü–∞ - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å \n1 –ø–∞—Ä–∞: –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n2 –ø–∞—Ä–∞: –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è) \n3 –ø–∞—Ä–∞: –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (–õ–µ–∫—Ü–∏—è) ')
        elif call.data == 'Denominator':

            keyboard = types.InlineKeyboardMarkup()
            Monday1 = types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='Monday1')
            keyboard.add(Monday1)
            Tuesday1 = types.InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data='Tuesday1')
            keyboard.add(Tuesday1)
            Wednesday1 = types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data='Wednesday1')
            keyboard.add(Wednesday1)
            Thursday1 = types.InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data='Thursday1')
            keyboard.add(Thursday1)
            Friday1 = types.InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data='Friday1')
            keyboard.add(Friday1)
            bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ', reply_markup=keyboard)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= call.message.text,
                              reply_markup='')
    except Exception:
        bot.edit_message_text(call.message.chat.id, '–≠—Ç–æ —á—Ç–æ –µ—â–µ –∑–∞ –ø–æ–∫–µ–º–æ–Ω?\n–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–µ–π—á–∞—Å –∫–∞–±–∞–Ω—á–∏–∫–∏ –ø–æ–¥—Å–∫–æ—á–∞—Ç –∏ –ø–æ—Ä–µ—à–∞—é—Ç!')
@bot.message_handler(content_types = ['text'])
def main(message): #–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    try:
        if message.chat.type == 'private':
            if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
                bot.send_message(message.chat.id, str(random.randint(0,100)))
            elif message.text == 'üé∞ –ò–≥—Ä–∞':
                keyboard = types.InlineKeyboardMarkup()
                key_yes = types.InlineKeyboardButton(text=' –î–∞', callback_data='yes')
                keyboard.add(key_yes)
                key_no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no')
                keyboard.add(key_no)
                bot.send_message(message.chat.id, '–¢—ã –¥–æ–≤–µ—Ä—è–µ—à—å –º–Ω–µ?', reply_markup = keyboard)
            elif message.text == '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                bot.register_next_step_handler(message, welcome)
            elif message.text == '–ù–µ—Ç':
                bot.register_next_step_handler(message, welcome)
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            elif message.text == '–î–∞':
                keyboard = types.InlineKeyboardMarkup()
                key_yes = types.InlineKeyboardButton(text='–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–¥–µ–ª (-‚ôæ: ‚ôæ+)', callback_data='one')
                keyboard.add(key_yes)
                key_no = types.InlineKeyboardButton(text="–ü–æ–ø—ã—Ç–∫–∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –Ω—É–ª—é üîú", callback_data='two')
                keyboard.add(key_no)
                bot.send_message(message.chat.id, '–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø–æ–ø—ã—Ç–æ–∫?) üôÄ ', reply_markup=keyboard)
            elif message.text == 'üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä':
                keyboard = types.InlineKeyboardMarkup()
                key_yes = types.InlineKeyboardButton(text='–ß–∏—Å–ª–∏—Ç–µ–ª—å', callback_data='Numerator')
                keyboard.add(key_yes)
                key_no = types.InlineKeyboardButton(text="–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å", callback_data='Denominator')
                keyboard.add(key_no)
                bot.send_message(message.chat.id, '–ß–∏—Å–ª–∏—Ç–µ–ª—å –∏–ª–∏ –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å?', reply_markup=keyboard)
            elif message.text == 'üìÖ –í—Ä–µ–º—è':
                date2 = datetime.datetime(2020, 6, 1)
                ic = datetime.datetime.now().isocalendar()
                b = '–ß–∏—Å–ª–∏—Ç–µ–ª—å' if ic[1] % 2 != 0 else '–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'
                date_time = datetime.datetime.now(tz = None)
                date_t = date2 - date_time
                bot.reply_to(message, "–°–µ–π—á–∞—Å:  " + date_time.strftime("%d-%m-%Y %H:%M") + f" - {b}" + f"\n–î–æ —Å–µ—Å—Å–∏–∏: {str(date_t.days)} –¥–Ω–µ–π")
                #bot.reply_to(message, f"–î–æ —Å–µ—Å—Å–∏–∏: {str(date_t.days)} –¥–Ω–µ–π\n–°–µ–π—á–∞—Å: {b}")
            elif message.text == "üëë COVID19":
                keyboard: InlineKeyboardMarkup = types.InlineKeyboardMarkup()
                key_yes = types.InlineKeyboardButton(text='–†–æ—Å—Å–∏—è', callback_data='Russia')

                key_no = types.InlineKeyboardButton(text="–°–®–ê", callback_data='Usa')
                keyboard.add(key_no, key_yes)
                key_go = types.InlineKeyboardButton(text="–£–∫—Ä–∞–∏–Ω–∞", callback_data='Ukraine')

                key_mo = types.InlineKeyboardButton(text="–í–æ –≤—Å–µ–º –º–∏—Ä–µ", callback_data='All')
                key_d = types.InlineKeyboardButton(text="–ò—Ç–∞–ª–∏—è", callback_data='EU')
                keyboard.add(key_go, key_d)
                keyboard.add(key_mo)
                bot.send_message(message.chat.id, '–ü–æ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?', reply_markup=keyboard)
            elif message.text == '‚õÖÔ∏è–ü–æ–≥–æ–¥–∞':
                observation = owm.weather_at_place('–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª')
                w = observation.get_weather()
                temp = w.get_temperature('celsius')['temp']
                V = w.get_wind()
                clothes = '–û–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–µ–µ' if (temp < 20 or V['speed'] < 10) else '–ù–∞–¥–µ–≤–∞–π –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É'
                bot.send_message(message.chat.id, '–ù–∞ —É–ª–∏—Ü–µ —Å–µ–π—á–∞—Å ' + w.get_detailed_status() + '\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å –≤ —Ä–∞–π–æ–Ω–µ '+ str(int(temp)) + ' ¬∞C\n' + '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ = ' + str(V['speed']) + ' –º/—Å\n' + clothes)
            elif message.text == 'üí∂ –ö—É—Ä—Å –≤–∞–ª—é—Ç':
                keyboard = types.InlineKeyboardMarkup()
                key_yes = types.InlineKeyboardButton(text='–ï–≤—Ä–æ', callback_data='EUR')
                key_no = types.InlineKeyboardButton(text="–î–æ–ª–ª–∞—Ä", callback_data='USD')
                keyboard.add(key_no, key_yes)
                bot.send_message(message.chat.id, f'–ü–æ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? {random.choice(smiles)}', reply_markup = keyboard)
            elif message.text == '–í–∞–∫–∞–Ω—Å–∏–∏':
                keyboard = types.InlineKeyboardMarkup()
                vak_1 = types.InlineKeyboardButton(text = '–ë–µ–∑ –æ–ø—ã—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç—ã', callback_data = 'VAK')
                vak_2 = types.InlineKeyboardButton(text = 'IT –æ—Ç—Ä–∞—Å–ª—å', callback_data = 'VAK1')
                keyboard.add(vak_1,vak_2)
                bot.send_message(message.chat.id, f'<u>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</u> ', parse_mode = 'html', reply_markup = keyboard)
            else:
                #bot.send_message('620389844', f'–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å {random.choice(smiles)}')
                markup = types.ReplyKeyboardMarkup(resize_keyboard= True, one_time_keyboard = True)
                item6 = types.KeyboardButton('üé∞ –ò–≥—Ä–∞')
                markup.add(item6)


                bot.send_message(message.chat.id, f'–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help) {random.choice(smiles)}', reply_markup = markup)


    except Exception:
        bot.send_message(message.chat.id, f'–≠—Ç–æ —á—Ç–æ –µ—â–µ –∑–∞ –ø–æ–∫–µ–º–æ–Ω? {random.choice(smiles)}\n–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–µ–π—á–∞—Å –∫–∞–±–∞–Ω—á–∏–∫–∏ –ø–æ–¥—Å–∫–æ—á–∞—Ç –∏ –ø–æ—Ä–µ—à–∞—é—Ç! {random.choice(smiles)}')
# def games(message):
#     bot.send_message(message.chat.id, 'Hello')
#     bot.register_next_step_handler(message, welcome)

bot.polling(none_stop = True)
 